File: db.py
 ```python
import sqlite3
DB_FILE = "productivity.db"
def connect_db():
    return sqlite3.connect(DB_FILE)
def create_tables():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS usage (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            app_name TEXT,
            duration INTEGER,
            last_used TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            app_name TEXT UNIQUE,
            max_time INTEGER
        )
    ''')
    conn.commit()
    conn.close()
def log_app_usage(app_name, duration):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO usage (app_name, duration) VALUES (?, ?)", (app_name, duration))
    conn.commit()
    conn.close()
def get_restricted_apps():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT app_name, max_time FROM settings")
    apps = cursor.fetchall()
    conn.close()
    return {app[0]: app[1] for app in apps}
# Initialize DB on first run
create_tables()```


File: tracker.py
 ```python
import time
import psutil
import subprocess
import os
from backend.db import log_app_usage
from PyQt6.QtCore import pyqtSignal, QObject
import win32gui
class TrackerSignals(QObject):
    """Signals to update UI with active window and Chrome tabs."""
    update_window_signal = pyqtSignal(str)
    update_tabs_signal = pyqtSignal(list)
signals = TrackerSignals()
def get_active_window():
    """Gets the currently active window title."""
    try:
        if os.name == 'nt':  # Windows
            import win32gui
            active_window = win32gui.GetWindowText(win32gui.GetForegroundWindow())
            return active_window
    except Exception as e:
        print(f"[ERROR] Failed to get active window: {e}")
    return "Unknown Window"
def get_active_chrome_tab():
    """Returns the title of the currently active Chrome tab."""
    hwnd = win32gui.GetForegroundWindow()  # Get active window
    title = win32gui.GetWindowText(hwnd)  # Get window title
    if " - Google Chrome" in title:
        return title  # Return only the active tab title
    return None  # Return None if Chrome is not active
def start_tracking():
    """Tracks active applications, windows, and Chrome tabs."""
    try:
        app_times = {}
        print("[INFO] Application tracking started.")
        while True:
            print("[DEBUG] Checking active window...")  # Debug log
            active_window = get_active_window()
            print(f"[DEBUG] Got active window: {active_window}")  # Debug log
            chrome_tab = get_active_chrome_tab()
            if chrome_tab:
                print(f"[DEBUG] Active Chrome Tab: {chrome_tab}")  # Debug log
            else:
                print("[DEBUG] No active Chrome tab detected.")  # New debug log
            print(f"[INFO] Active Window: {active_window}")
            signals.update_window_signal.emit(active_window)
            signals.update_tabs_signal.emit([chrome_tab] if chrome_tab else [])  # Fix
            time.sleep(2)
    except Exception as e:
        print(f"[ERROR] Tracking error: {e}")
if __name__ == "__main__":
    print("[DEBUG] Calling start_tracking()...")
    start_tracking()
```


File: autoclose.py
 ```python
import psutil
import time
from backend.db import get_restricted_apps
def close_app(app_name):
    """Force closes an application by name."""
    try:
        for process in psutil.process_iter(attrs=['pid', 'name']):
            if process.info['name'].lower() == app_name.lower():
                psutil.Process(process.info['pid']).terminate()
                print(f"[INFO] Closed {app_name} (Exceeded limit)")
                return
    except Exception as e:
        print(f"[ERROR] Failed to close {app_name}: {e}")
def start_autoclose():
    """Monitors and closes restricted applications in the background."""
    try:
        print("[INFO] Auto-close feature started.")
        restricted_apps = get_restricted_apps()
        app_times = {}
        while True:
            for app, max_time in restricted_apps.items():
                app_times[app] = app_times.get(app, 0) + 1
                print(f"[INFO] Monitoring {app}: {app_times[app]} sec")
                if app_times[app] > max_time:
                    close_app(app)
                    app_times[app] = 0  # Reset timer after closing
            time.sleep(1)
    except Exception as e:
        print(f"[ERROR] Auto-close encountered an issue: {e}")```


File: config.py
 ```python
DEFAULT_RESTRICTED_APPS = {
    "chrome.exe": 3600,  # 1 hour
    "youtube.exe": 1800  # 30 minutes
}```


File: utils.py
 ```python
import logging
logging.basicConfig(filename="logs/app_log.txt", level=logging.INFO, format="%(asctime)s - %(message)s")
def log_event(event):
    """Logs an event."""
    logging.info(event)```


File: main_ui.py
 ```python
from PyQt6.QtWidgets import QMainWindow, QLabel, QVBoxLayout, QWidget, QListWidget
from backend.tracker import signals
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Productivity Tracker")
        self.setGeometry(100, 100, 600, 400)
        self.layout = QVBoxLayout()
        self.active_window_label = QLabel("Active Window: Loading...")
        self.tabs_list = QListWidget()
        self.layout.addWidget(self.active_window_label)
        self.layout.addWidget(self.tabs_list)
        container = QWidget()
        container.setLayout(self.layout)
        self.setCentralWidget(container)
        # Connect signals to update UI
        signals.update_window_signal.connect(self.update_active_window)
        signals.update_tabs_signal.connect(self.update_tabs_list)
    def update_active_window(self, window_name):
        """Updates the active window display."""
        self.active_window_label.setText(f"Active Window: {window_name}")
    def update_tabs_list(self, tabs):
        """Updates the Chrome tabs list."""
        self.tabs_list.clear()
        self.tabs_list.addItems(tabs)
```


File: settings_ui.py
 ```python
from PyQt6.QtWidgets import QWidget, QPushButton, QVBoxLayout, QLineEdit, QLabel
from backend.db import get_restricted_apps
class SettingsWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Settings")
        self.setGeometry(350, 350, 300, 200)
        self.initUI()
    def initUI(self):
        layout = QVBoxLayout()
        self.label = QLabel("Enter app name and max time (seconds)", self)
        layout.addWidget(self.label)
        self.app_name_input = QLineEdit(self)
        self.app_name_input.setPlaceholderText("Enter app name (e.g., chrome.exe)")
        layout.addWidget(self.app_name_input)
        self.time_input = QLineEdit(self)
        self.time_input.setPlaceholderText("Enter max time (seconds)")
        layout.addWidget(self.time_input)
        self.save_button = QPushButton("Save", self)
        self.save_button.clicked.connect(self.save_settings)
        layout.addWidget(self.save_button)
        self.setLayout(layout)
    def save_settings(self):
        app_name = self.app_name_input.text().strip()
        max_time = self.time_input.text().strip()
        if app_name and max_time.isdigit():
            with open("config.txt", "a") as f:
                f.write(f"{app_name}={max_time}\n")
            self.close()```


File: icon.png



File: app_log.txt
from PyQt6.QtWidgets import QMainWindow, QPushButton, QLabel, QVBoxLayout, QWidget
from frontend.settings_ui import SettingsWindow
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Productivity Tracker")
        self.setGeometry(300, 300, 400, 300)
        self.initUI()
    def initUI(self):
        layout = QVBoxLayout()
        self.label = QLabel("Welcome to Productivity Tracker", self)
        layout.addWidget(self.label)
        self.settings_button = QPushButton("Settings", self)
        self.settings_button.clicked.connect(self.open_settings)
        layout.addWidget(self.settings_button)
        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)
    def open_settings(self):
        self.settings_window = SettingsWindow()
        self.settings_window.show()


File: ProductivityTracker.exe



File: main.py
 ```python
import sys
import threading
from PyQt6.QtWidgets import QApplication
from frontend.main_ui import MainWindow
import backend.tracker as tracker
import backend.autoclose as autoclose
def start_background_tasks():
    """Runs tracking and auto-close in separate threads to avoid UI freeze."""
    try:
        tracking_thread = threading.Thread(target=tracker.start_tracking, daemon=True)
        close_thread = threading.Thread(target=autoclose.start_autoclose, daemon=True)
        tracking_thread.start()
        close_thread.start()
        print("[INFO] Background tasks started successfully.")
    except Exception as e:
        print(f"[ERROR] Failed to start background tasks: {e}")
def main():
    """Main function to start the application."""
    try:
        print("[INFO] Launching Productivity Tracker...")
        app = QApplication(sys.argv)
        window = MainWindow()
        window.show()
        start_background_tasks()  # Run tracking & auto-close in background
        sys.exit(app.exec())
    except Exception as e:
        print(f"[ERROR] Unexpected error in main: {e}")
if __name__ == "__main__":
    main()```


File: startup.py
 ```python
import os
import sys
import shutil
def add_to_startup():
    startup_folder = os.path.join(os.getenv('APPDATA'), 'Microsoft\\Windows\\Start Menu\\Programs\\Startup')
    script_path = os.path.abspath("main.py")
    shortcut_path = os.path.join(startup_folder, "ProductivityTracker.lnk")
    if not os.path.exists(shortcut_path):
        shutil.copy(script_path, shortcut_path)
        print("Added to Windows Startup!")
add_to_startup()```


File: requirements.txt
PyQt6==6.6.0
psutil==5.9.8
db-sqlite3  # Built-in with Python, no need to install separately



File: README.md



